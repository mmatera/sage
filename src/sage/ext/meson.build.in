interpreters = custom_target(
    'sage.ext.interpreters',
    output: 'all.py',
    input: '../../sage_setup/autogen/interpreters/__init__.py',
    command: [py, '-m', 'sage_setup.autogen.interpreters', meson.current_source_dir() / 'interpreters'],
    # This is actually against the Meson philosophy, which does not like in-source builds.
    # So normally you would do something like the following
    # however, this we currently cannot pass the generated files as sources to install_sources
    # properly fixing this is left for a follow-up
    # command: [py, '-m', 'sage_setup.autogen.interpreters','@OUTDIR@'],
    env: ['PYTHONPATH=' + meson.current_source_dir() / '..' / '..'],
)

# Manually create header files, which otherwise is not found
wrapper_el_header = custom_target(
  'wrapper_el.h',
  output : 'wrapper_el.h',
  input : ['interpreters/wrapper_el.pyx', interpreters],
  command : [cython.cmd_array(), '@INPUT0@', '-o', '@OUTPUT@', '-I', join_paths(meson.current_source_dir(), '../../')],
)
wrapper_cc_header = custom_target(
  'wrapper_cc.h',
  output : 'wrapper_cc.h',
  input : ['interpreters/wrapper_cc.pyx', interpreters],
  command : [cython.cmd_array(), '@INPUT0@', '-o', '@OUTPUT@', '-I', join_paths(meson.current_source_dir(), '../../')],
)
wrapper_cdf_header = custom_target(
  'wrapper_cdf.h',
  output : 'wrapper_cdf.h',
  input : ['interpreters/wrapper_cdf.pyx', interpreters],
  command : [cython.cmd_array(), '@INPUT0@', '-o', '@OUTPUT@', '-I', join_paths(meson.current_source_dir(), '../../')],
)
wrapper_rr_header = custom_target(
  'wrapper_rr.h',
  output : 'wrapper_rr.h',
  input : ['interpreters/wrapper_rr.pyx', interpreters],
  command : [cython.cmd_array(), '@INPUT0@', '-o', '@OUTPUT@', '-I', join_paths(meson.current_source_dir(), '../../')],
)

interpreters_dep = declare_dependency(
    sources: [interpreters, wrapper_el_header, wrapper_cc_header, wrapper_cdf_header, wrapper_rr_header],
)
